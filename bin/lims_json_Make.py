#!/usr/bin/env python

import sys
import pandas as pd 
import os 
import argparse
import requests
import json

def fetch_sample_table_from_LIMS(fc_id, molng):
    """
    Get the run info from LIMS. Returns the /n/analysis/ folder where the primary analsysis pipeline copied all the data
    """
    # Get run info from lims
    NGS_LIMS = 'https://lims.stowers.org/zanmodules/molecular-biology/ngs'
    API_TOKEN = 'ca7952666a03dd4e59d0cd59e39fecc7' # Should get a new one for each pipeline, or even each user

    header = {'x-zan-apitoken': f'{API_TOKEN}', 
        'Accept': 'application/json'}
    run_info = requests.get(f'{NGS_LIMS}/flowcells/{fc_id}/samples', headers=header, verify=False)
    if not run_info.ok: 
        sys.exit('Malformed API request. Please double check your flowcell ID')
    
    lims_data = run_info.json() # Close request
    run_info.close() 
    df_run_info = pd.DataFrame.from_dict(lims_data)
    df_sample_info = pd.concat([df_run_info['readLength'] ,df_run_info['readType'], df_run_info['samples'].apply(pd.Series)], axis=1)
    if molng != False:
        df_sample_info = df_sample_info[df_sample_info["prnOrderNo"] == molng]

    return df_sample_info

parser = argparse.ArgumentParser()
# parser.add_argument('-s', '--sample_report', default=None, help= "Input Samplereport.csv associated to order, generated by primary analysis pipeline")
parser.add_argument('-o', '--output_dir', default="./", help="Output directory, default=cwd, default='./'")
parser.add_argument('-l', '--lims', help='provide fcid')
parser.add_argument("-m", '--molng', default=False, help='provide molng id, this can be just empty if the FCID has only 1 MOLNG-ID')
args=parser.parse_args()

df_sample_info = fetch_sample_table_from_LIMS(args.lims, args.molng)

lims_info_dic = {"prnOrderNo":f"{df_sample_info['prnOrderNo'].tolist()[0]}",
                 "orderType":f"{df_sample_info['orderType'].tolist()[0]}",
                 "genome":f"{df_sample_info['genomeVersion'].tolist()[0]}",
                 "analysisGoals":f"{df_sample_info['analysisGoals'].tolist()[0]}",
                 "readLength":f"{df_sample_info['readLength'].tolist()[0]}",
                 "readType":f"{df_sample_info['readType'].tolist()[0]}"}

with open("lims_order.json", "w") as newfile:
    json.dump(lims_info_dic, newfile)